# -*- coding: utf-8 -*-
"""exp3_dwm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13flA9OkjUvFPA5lNX9EXyu2pcD4AxbDb
"""

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv("Real_Estate_Sales_730_Days.csv")

df.head(10)

df.describe()

df = df.drop(['ApartmentUnitNumber'],axis=1)

land_sf_mean = df['LandSF'].mean()
df['LandSF'].fillna(value = land_sf_mean , inplace = True)

Total_finish_sf_mean = df['TotalFinishedArea'].mean()
df['TotalFinishedArea'].fillna(value = Total_finish_sf_mean , inplace = True)

fillname = 'ALDWIN '
df['OwnerFirstName'].fillna(value = fillname , inplace = True)

fillnme = 'MCKELLAR'
df['OwnerLastName'].fillna(value = fillname , inplace = True)

df = df.dropna()

df.info()

df.isnull().sum()

df.describe()

df.duplicated().sum()

df.to_csv('Filtered_Real_Estate_Sales_730_Days.csv',encoding='utf-8-sig')
files.download('Filtered_Real_Estate_Sales_730_Days.csv')

uploaded = files.upload()

df = pd.read_csv('Filtered_Real_Estate_Sales_730_Days.csv')

df.head()

y = df['SalePrice'].values
x = df['LandSF'].values
df.plot(x='SalePrice',y='LandSF',style='p')
plt.xlabel('Sale Price')
plt.ylabel('Land Square Foot')
plt.show()

sales_sub_cats = df.groupby('AssrLandUse')['TotalFinishedArea'].agg(['sum'])
plt.style.use('bmh')
sales_sub_cats.plot(xlabel ='Land Use', ylabel = "Finished Area",kind = 'bar',figsize=(10,10))
plt.show()

region = df['AssrLandUse'].value_counts().index
x = df['AssrLandUse'].value_counts()
plt.figure(figsize=(15,15))
plt.pie(x,explode = None , labels =  region ,autopct='%2.2f%%')
plt.title("Sales of each category")
plt.show()

y = df['SalePrice'].values
numeric = df._get_numeric_data()
x = numeric.drop(['SalePrice','Unnamed: 0','PropertyID','xrCompositeLandUseID','xrBuildingTypeID','LocationStartNumber','xrPrimaryNeighborhoodID','xrSalesValidityID','xrDeedID'],axis=1).values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2, random_state=69)

from sklearn import linear_model
reg = linear_model.LinearRegression()
reg.fit(x_train,y_train)

y_pred = reg.predict(x_test[1:3])
print(y_pred)

from sklearn.metrics import r2_score
e = r2_score(y_test,y_pred)
e

from sklearn.metrics import mean_squared_error
e = mean_squared_error(y_test,y_pred)
e



